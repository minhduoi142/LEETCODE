class Solution {
public:
    vector<int> findSubstring(string s, vector<string>& words) {



  

    int wordLen = words[0].size();
    int concatLen = wordLen * words.size();
    int n = s.size();
    
    unordered_map<string, int> wordCount;
    for (const string &word : words) {
        wordCount[word]++;
    }

    vector<int> result;

    for (int i = 0; i < wordLen; i++) {
        int left = i, count = 0;
        unordered_map<string, int> seenWords;

        for (int j = i; j <= n - wordLen; j += wordLen) {
            string word = s.substr(j, wordLen);

            if (wordCount.find(word) != wordCount.end()) {
                seenWords[word]++;
                count++;

                while (seenWords[word] > wordCount[word]) {
                    string leftWord = s.substr(left, wordLen);
                    seenWords[leftWord]--;
                    count--;
                    left += wordLen;
                }

                if (count == words.size()) {
                    result.push_back(left);
                }
            } else {
                seenWords.clear();
                count = 0;
                left = j + wordLen;
            }
        }
    }

    return result;


        
    }
};